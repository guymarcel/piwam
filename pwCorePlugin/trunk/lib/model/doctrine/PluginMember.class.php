<?php
/**
 * Member
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    piwam
 * @subpackage model
 * @author     Adrien Mogenet
 * @version    SVN: $Id: Builder.php 6716 2009-11-12 19:26:28Z jwage $
 */
abstract class PluginMember extends BaseMember
{
  private $_guardUser = null;
  private $_guardUserModified = false;
  private $_guardIsNew = false;

  public function getUserGuard()
  {
    if($this->_guardUser == null)
    {
      $this->_guardUser = parent::getUser();
      // creation new member we create sfGuardUser
      if($this->_guardUser == null)
      {
        $this->_guardUser = new sfGuardUser();
        $this->_guardIsNew = true;
      }
    }
    return $this->_guardUser;
  }
  /*  public function construct()
   {
    
   }*/
  /**
   * Save guard user before save the current member
   * @param Doctrine_Connection $conn
   */
  public function save(Doctrine_Connection $conn = null)
  {

    if($this->getUserGuard()->isNew())
    {
      $username = $this->_guardUser->getUsername();
      // get id for member
      $this->_guardUser->save($conn);
      // TODO: Impossible get the id of sfUserGuard here !
      // the result of getId() is the firstname and lastname (it seems object user) ?
      $user = sfGuardUserTable::getInstance()->retrieveByUsername($username);
      	
      $this->setId($user->getId());
    }
    else if($this->_guardUserModified)
    {
      $this->_guardUser->save($conn);
    }
    parent::save($conn);
  }
  /*
   * GETTERS PROXY to sfGuardUser
   */
  public function getFirstname()
  {
    return mb_convert_case($this->getUserGuard()->getFirstName(), MB_CASE_TITLE, "UTF8");
  }
  public function getLastname()
  {
    return mb_convert_case($this->getUserGuard()->getLastName(), MB_CASE_TITLE, "UTF8");
  }
  public function getEmail()
  {
    return $this->getUserGuard()->getEmailAddress();
  }
  public function getUsername()
  {
    return $this->getUserGuard()->getUsername();
  }
  public function getPassword()
  {
    return $this->getUserGuard()->getPassword();
  }
  public function isSuperAdmin()
  {
    return $this->getUserGuard()->getIsSuperAdmin();
  }
  public function getName()
  {
    return mb_convert_case($this->getUserGuard()->getName(), MB_CASE_TITLE, "UTF8");
  }
  /*
   * SETTERS PROXY to sfGuardUser
   */
  public function setFirstname($val)
  {
    $this->_guardUserModified = true;
    $this->getUserGuard()->setFirstName($val);
    return $this;
  }
  public function setLastname($val)
  {
    $this->_guardUserModified = true;
    $this->getUserGuard()->setLastName($val);
    return $this;
  }
  public function setEmail($val)
  {
    $this->_guardUserModified = true;
    $this->getUserGuard()->setEmailAddress($val);
    return $this;
  }
  public function setStatus($val)
  {
    if($val == MemberTable::STATE_ENABLED)
    {
      $this->getUserGuard()->setIsActive(true);
    }
    else
    {
      $this->getUserGuard()->setIsActive(false);
    }
    parent::setStatus($val);
  }
  /*
   * SHORTCUTS for sfGuardUser
   */
  public function getAclGroupNames()
  {
    return $this->getUserGuard()->getGroupNames();
  }

  /**
   * Get Member object as string
   *
   * @return string
   */
  public function __toString()
  {
    return $this->getUserGuard()->getName();
  }

  /**
   * Overrides the setPassword to encrypt it
   *
   * @param   string  $v
   * @return  Member  $this
   */
  public function setPassword($v)
  {
    $this->_guardUserModified = true;
    $this->getUserGuard()->setPassword($v);
    return $this;
  }

  /**
   * Overrides the setUsername method (manage the null case)
   *
   * @param   string  $v
   * @return  Member  $this
   */
  public function setUsername($v)
  {
    $this->_guardUserModified = true;
    $this->getUserGuard()->setUsername($v);
    return $this;
  }

  /**
   * Returns the whole URI of user's picture, or 'no-picture' image
   * if he doesn't have one
   *
   * @return string
   */
  public function getPictureURI()
  {
    if ($this->getPicture())
    {
      return '/uploads/trombinoscope/' . $this->getPicture();
    }
    else
    {
      return 'no_picture';
    }
  }

  /**
   * Remove all existing credentials that have been set to the
   * Member previously
   */
  /* public function resetAcl()
   {
   $q = Doctrine_Query::create()
   ->delete('AclCredential c')
   ->where('c.member_id = ?', $this->getId());

   return $q->execute();
   }*/

  /**
   * Add a new credential to the member
   *
   * @param   string  $code   : Code of the AclAction
   */
  /* public function addCredential($code)
   {
   $credential = new AclCredential();
   $credential->setMemberId($this->getId());
   $credential->setAclAction(AclActionTable::getByCode($code));
   $credential->save();
   }*/

  /**
   * Check if the member has to pay a due or not
   *
   * @return  boolean
   */
  public function hasToPayDue()
  {
    $days = $this->getDaysBeforeNextDue();

    if (null === $days)
    {
      return false;
    }
    else
    {
      return $days <= 0;
    }
  }

  /**
   * Get the number of days that the member get to pay his due.
   * If result a negative, it means that user should have paid
   * the Due X days ago.
   *
   * If the member does not have to pay due (exempted) null is
   * returned
   *
   * @return  Mixed   Null if non available, relative integer otherwise
   */
  public function getDaysBeforeNextDue()
  {
    if ($this->getDueExempt() == true)
    {
      return null;
    }
    else
    {
      $lastDue = DueTable::getLastForMember($this->getId());

      if (null == $lastDue)
      {
        $today = date('Y-m-d');
        $since = $this->getSubscriptionDate();

        return DateTools::getDaysBetween($today, $since);
      }
      else
      {
        return $lastDue->getDaysBeforeExpiration();
      }
    }
  }

  /**
   * Overrides getter for City field.
   *
   * @return  string  well-formated city
   */
  public function getCity()
  {
    return mb_convert_case($this->_get('city'), MB_CASE_UPPER, "UTF8");
  }

  /**
   * Overrides getter for Street field
   *
   * @return  string  well-formated lastname
   */
  public function getStreet()
  {
    return mb_convert_case($this->_get('street'), MB_CASE_TITLE, "UTF8");
  }

  /**
   * Get the whole adress of the member
   *
   * @return string
   */
  public function getCompleteAddress()
  {
    return StringTools::to7bit($this->getStreet()) . ', ' . $this->getZipcode() . ' ' . StringTools::to7bit($this->getCity());
  }

  /**
   * Returns information to display on Google Map
   *
   * @return  string
   */
  public function getInfoForGmap()
  {
    return '<b>' . $this->getName() . '</b><br />' . $this->getStreet(). '<br/>' . $this->getStreet2(). '<br/>'
    .$this->getZipcode().' '. $this->getCity();
  }

  /**
   * Delete the Member object logically (it's not physically removed).
   * Erase username and passwords
   *
   * @return  Member
   */
  public function disable()
  {
    // $this->setUsername(null);
    //  $this->setPassword(null);
    $this->setState(MemberTable::STATE_DISABLED);
    $this->getUserGuard()->setIsActive(false);
    $this->_guardUserModified = true;
    return $this;
  }

  /**
   * Get the number of Dues paid by the Member
   *
   * @return  integer
   */
  public function getNumberOfDues()
  {
    $dues = $this->getDue();

    return count($dues);
  }
  /**
   * Return true if the user has geoloc position
   * @return boolean
   */
  public function hasGeolocAddress()
  {
    return $this->getLatitude() != null && $this->getLongitude() != null;
  }
}
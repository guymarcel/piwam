<?php

/**
 * PluginAclGroupTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginAclGroupTable extends Doctrine_Table
{
	/** if the selected_new_member field is to 1 we select the group when we create new member */
	const SELECTED_NEW_MEMBER = 1;
	
    /**
     * Returns an instance of this class.
     *
     * @return object PluginAclGroupTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginAclGroup');
    }
	/**
	 * Get query filtrered for association
	 * @param integer $asso_id
	 * @return Doctrine_Query
	 */
    public static function getQueryEnabledForAssociation($asso_id)
    {
    	$q = Doctrine_Query::create()         
          ->from('AclGroup gr')
          ->where('gr.association_id = ?',$asso_id);
       	return $q;
    }
    /**
     * Get all acl groups for the association 
     * @param integer $asso_id
     * @return Doctrine_Collection of AclGroup
     */
    public static function getGroupsForAssociation($asso_id)
    {
    	return self::getQueryEnabledForAssociation($asso_id)->execute();
    }
	/**
	 * Load acl group by id
	 * @param integer $group_id
	 * @return AclGroup or null if not found
	 */
  	public static function getById($group_id)
  	{
  		$q = Doctrine_Query::create()         
          ->from('AclGroup gr')
          ->where('gr.id = ?',$group_id);
       	return $q->fetchOne();
  	}
  	/**
  	 * Get acl groups selected by default for the association when we create new member
  	 * @param integer $asso_id
  	 * @return array of integer with acl group id selected by default for new member
  	 */
  	public static function getSelectedDefaultIdForAssociation($asso_id)
  	{
  		// TODO : optimize the request get only id
  		$q = self::getQueryEnabledForAssociation($asso_id);
  		//$q->select('gr.id as id');
  		$q->andWhere('gr.selected_new_member = ?', self::SELECTED_NEW_MEMBER);
  		$groups = $q->execute();
  		$id_groups = array();
  		foreach($groups as $group)
  		{
  			$id_groups[] = $group->getId();
  		}
  		return $id_groups;
  	}
}
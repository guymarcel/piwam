<?php

/**
 * PluginAclGroup
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginAclGroup extends BaseAclGroup
{
	private $_guardGroup = null;
	private $_guardGroupModified = false;
	
	/**
	 * Get cached sfGuardGroup
	 * @return sfGuardGroup the group of rights
	 */
	public function getGroupGuard()
	{
  	if($this->_guardGroup == null)
  	{
  		$this->_guardGroup = parent::getGroup();
  		// creation new member we create sfGuardUser
  		if($this->_guardGroup == null)
			{
				$this->_guardGroup = new sfGuardGroup();
			}
  	}
  	return $this->_guardGroup;		
	}
  /**
   * Save guard user before save the current member
   * @param Doctrine_Connection $conn
   */
	public function save(Doctrine_Connection $conn = null)
	{	 
		if($this->getGroupGuard()->isNew())
		{
				// get id for member
				$this->_guardGroup->save($conn);
				$this->setGroupId($this->_guardGroup->getId());
		}
	  else if($this->_guardGroupModified)
	  {
	  	$this->_guardGroup->save($conn);
	  }
	  parent::save($conn);	  
	}
	public function delete(Doctrine_Connection $conn = null)
  {
  	if(!$this->getGroupGuard()->isNew())
		{
			$this->getGroupGuard()->delete();
		}
  	parent::delete($conn);
	}
	
	public function getName()
	{
		return $this->getGroupGuard()->getName();
	}
	public function getLabel()
	{
		return $this->getGroupGuard()->getName();
	}
	public function getDescription()
	{
		return $this->getGroupGuard()->getDescription();
	}

	public function setName($val)
	{
		$this->_guardGroupModified = true;
		return $this->getGroupGuard()->setName($val);
	}
	public function setDescription($val)
	{
		$this->_guardGroupModified = true;
		return $this->getGroupGuard()->setDescription($val);
	}	
	
	// PERF: faire un count direct pour obtenir le nombre de droits
	public function getNbPermissions()
	{
		return count($this->getGroupGuard()->getPermissions());		
	}
	public function getNbUsers()
	{
		return count($this->getGroupGuard()->getUsers());
	}
	public function getAclActions()
	{
		return AclActionTable::getAllActionsByGroupId($this->getGroupId());
	}
	
  /**
   * Add a new credentials to the group
   *
   * @param   array(AclAction)  $codes   : array of the AclAction
   */
  public function addCredentials(Doctrine_Collection  $actions)
  {
    foreach ($actions as $action)
    {        
    	$this->addCredential($action);	
    }
  }
  public function addCredential(AclAction $action)
  {
  	if(!$this->hasCredential($action->getCode()))
    {
	  	$credential = new sfGuardGroupPermission();
	    $credential->setGroupId($this->getGroupId());
	    $credential->setPermissionId($action->getPermissionId());
	    $credential->save();
    }
  }
  /**
   * Add a new member to the group
   *
   * @param   Member  $member   : member to add
   */
  public function addMember(Member $member)
  {  	
  	if($this->hasMember($member))
  	{
  		return;
  	}
    $groupMember = new sfGuardUserGroup();
    $groupMember->setGroupId($this->getGroupId());
    $groupMember->setUserId($member->getId());
    $groupMember->save();
  }
  /**
   * Remove all credentials for the group
   */
  public function resetAcl()
  {
  	AclGroupPermissionTable::removePermissionsByGroupId($this->getGroupId());
  }
  /**
   * Return true if the froup has the right credential, false otherwise
   * @param 	string	$right acl action name to test
   */
  public function hasCredential($right)
  {
  	return AclGroupPermissionTable::groupHasPermission($this->getGroupId(),$right);
  }
  /**
   * Return true if the froup has the member, false otherwise
   * @param 	Member	$member
   */
  public function hasMember(Member $member)
  {
  	return AclGroupMemberTable::groupHasMember($this->getGroupId(),$member->getId());
  }
}